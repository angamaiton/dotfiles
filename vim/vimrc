" ==========================================================================
" Sections:
"   -> Settings variables
"   -> General
"   -> Vim UI
"   -> Plugins
"   -> Search
"   -> Theme
" ==========================================================================

" ==========================================================================
" Settings variables
" ==========================================================================

let g:mapleader = "\<Space>"

let g:nan_use_completion = has('nvim') && has('python3')

let g:has_async = v:version >= 800 || has('nvim')

let g:nan_tab_completion = 1 " (s-tab)

" This must be a g: variable to access with the Plug command
let g:fzf_dir = isdirectory('/usr/local/opt/fzf')
      \ ? '/usr/local/opt/fzf'
      \ : isdirectory(expand('~/.fzf'))
      \ ? '~/.fzf'
      \ : ''

" ==========================================================================
" General
" ==========================================================================

" How many lines of history Vim remembers
set history=500

" Enable filetype plugins
filetype plugin indent on 

" Set file to readonly when changed from outside
set autoread

" Run :write before other commands
set autowrite

" Context around current cursor position
set numberwidth=5

" Best of both worlds (line numbers)
set number relativenumber

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of the dotfiles.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" ----------------------------------------------------------------------------
" General: Bell
" ----------------------------------------------------------------------------

" No flashes
set novisualbell

" No beeps
set noerrorbells

" ----------------------------------------------------------------------------
" General: Input
" ----------------------------------------------------------------------------

" Enable mouse
set mouse=a

" Typing key combos
set notimeout
set ttimeout

" ----------------------------------------------------------------------------
" General: Lines
" ----------------------------------------------------------------------------

" Show the statusline
set laststatus=2

" Don't show -- INSERT -- in commandline
set noshowmode

" ----------------------------------------------------------------------------
" General: Sides
" ----------------------------------------------------------------------------

set textwidth=78                      " after column 80, &tw+3

set colorcolumn=+3

set colorcolumn+=120

set cursorline

set synmaxcol=512

if exists('+signcolumn') | set signcolumn=yes | endif

" ==========================================================================
" Vim UI
" ==========================================================================

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Dark theme for nightf4gs
set background=dark

set nowrap

" J command doesn't add extra space
set nojoinspaces

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Set window title by default.
set title

" Always focus on splited window.
set splitright
set splitbelow

" Show the cursor position at all times
set ruler

" display incomplete commands
set showcmd

" ==========================================================================
" Plugins
" ==========================================================================

" TODO: Lockfile to install automatically?
let g:nan#vim_dir = fnamemodify(resolve(expand('$MYVIMRC')), ':p:h')
let g:nan#plug_dir = '/vendor/'
let g:nan#plug_absdir = g:nan#vim_dir . g:nan#plug_dir

if executable('git')
  let s:has_plug = !empty(glob(expand(g:nan#vim_dir . '/autoload/plug.vim')))
  if !s:has_plug && executable('curl')
    call nanplug#install#Install()
    let s:has_plug = 1
  endif

  if s:has_plug
    command! PI PlugInstall
    command! PU PlugUpgrade | PlugUpdate
    let g:plug_window = 'tabnew'
    call plug#begin(g:nan#plug_absdir)
    if empty($VIMNOPLUGS) | call nanplug#plugins#LoadAll() | endif
    call plug#end()
  endif
endif

" ==========================================================================
" Matching/Search
" ==========================================================================

" tenths of a sec
set matchtime=1                       

" briefly jump to matching paren?
set showmatch                         

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

if exists('+tagcase') && has('patch-7.4.2230') | set tagcase=followscs | endif

" Searches wrap around end of the file.
set wrapscan                          

" ==========================================================================
" Wild/globbing
" ==========================================================================

" browse files in same dir as open file
set browsedir=buffer

" Enhanced command line completion
set wildmenu

" Complete files using a menu AND list
set wildmode=list:longest,full

let &wildignorecase = v:version >= 704

" Binary
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.jar,*.pyc,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" Cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*.gem
set wildignore+=.sass-cache
set wildignore+=npm-debug.log
" Compiled
set wildignore+=*.marko.js
set wildignore+=*.min.*,*-min.*
" Temp/System
set wildignore+=*.*~,*~
set wildignore+=*.swp,.lock,.DS_Store,._*,tags.lock

" ----------------------------------------------------------------------------
" File saving
" ----------------------------------------------------------------------------

" reload files if they were edited elsewhere?
"set autoread

set fileformats=unix,mac,dos
" Not modifiable if no window (e.g. resourcing vimrc)
if !&modifiable | set fileformat=unix | endif

" ==========================================================================
" Indenting - overridden by indent plugins
" ==========================================================================

set autoindent                        " indent when creating newline

" For autoindent, use same spaces/tabs mix as previous line, even if
" tabs/spaces are mixed. Helps for docblock, where the block comments have a
" space after the indent to align asterisks
"
" The test case what happens when using o/O and >> and << on these:
"
"     /**
"      *
"
" Refer also to formatoptions+=o (copy comment indent to newline)
set nocopyindent

" Try not to change the indent structure on "<<" and ">>" commands. I.e. keep
" block comments aligned with space if there is a space there.
set nopreserveindent

" Smart detect when in braces and parens. Has annoying side effect that it
" won't indent lines beginning with '#'. Relying on syntax indentexpr instead.
" 'smartindent' in general is a piece of garbage, never turn it on.
set nosmartindent

" Global setting. I don't edit C-style code all the time so don't default to
" C-style indenting.
set nocindent

" ----------------------------------------------------------------------------
" Tabbing - overridden by editorconfig, after/ftplugin
" ----------------------------------------------------------------------------

" set tabstop=2

" set shiftwidth=2

" use multiple of shiftwidth when shifting indent levels.
" this is OFF so block comments don't get fudged when using ">>" and "<<"
set noshiftround

" When on, a <Tab> in front of a line inserts blanks according to
" 'shiftwidth'. 'tabstop' or 'softtabstop' is used in other places.
set smarttab

" Backspace anywhere
set backspace=indent,eol,start

" ============================================================================
" Filetypes
" ============================================================================

" ----------------------------------------
" Filetype: python
" ----------------------------------------

" $VIMRUNTIME/syntax/python.vim
let g:python_highlight_all = 1

" ----------------------------------------
" Filetype: sh
" ----------------------------------------

" $VIMRUNTIME/syntax/sh.vim - always assume bash
let g:is_bash = 1

" ----------------------------------------
" Filetype: vim
" ----------------------------------------

" $VIMRUNTIME/syntax/vim.vim
" disable mzscheme, tcl highlighting
let g:vimsyn_embed = 'lpPr'

" ==========================================================================
" Swapfiles/Backups
" ==========================================================================

set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287

" ----------------------------------------------------------------------------
" Built-in completion
" ----------------------------------------------------------------------------

" Don't consider = symbol as part filename.
set isfname-==

set complete-=i                       " don't complete includes
set complete-=t                       " don't complete tags
set completeopt-=preview              " don't open scratch (e.g. echodoc)
set completeopt+=menu,menuone         " show PUM, even for one thing

" ----------------------------------------------------------------------------
" Message output on vim actions
" ----------------------------------------------------------------------------

set shortmess-=f                      " (file x of x) instead of just (x of x)
set shortmess+=ilmnrxoOtWI
" Disable "Pattern not found" messages
if has('patch-7.4.314') | set shortmess+=c | endif

" ============================================================================
" Autocommands
" ============================================================================

augroup nanfile
  autocmd BufReadPre *
        \ if getfsize(expand("%")) > 10000000 | syntax off | endif
  autocmd BufReadPre *.min.* syntax off
augroup END

" augroup nanale
"   autocmd!
"   if g:has_async
"     set updatetime=1000
"     autocmd CursorHold * call ale#Lint()
"     autocmd CursorHoldI * call ale#Lint()
"     autocmd InsertEnter * call ale#Lint()
"     autocmd InsertLeave * call ale#Lint()
"   else
"     echoerr "Please install Neovim/Vim 8"
"   endif
" augroup END

" augroup nanlines
"   autocmd!
"   autocmd VimEnter * nested call nanline#Init()
" augroup END

augroup nanwindow
  autocmd!
  autocmd VimResized * wincmd =
augroup END

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

" Leaving this here until I decide on a saner/safer way to do this
let g:rooter_change_directory_for_non_project_files = 'current'

let g:deoplete#enable_at_startup = 1

" ==========================================================================
" Theme
" ==========================================================================

" Atom's one positive
colorscheme two-firewatch


let g:two_firewatch_italics=1
