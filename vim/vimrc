" ==========================================================================
" 1. Settings variables
" ==========================================================================

let g:mapleader = " "

let g:nan_use_completion = has('nvim') && has('python3')

let g:has_async = v:version >= 800 || has('nvim')

" ============================================================================
" 2. Personal defaults
" May be overridden by **/plugins, after/plugins and **/ftplugins
" ============================================================================

set modeline

" Pretty quick... errorprone on old vim so only apply to nvim
if has('nvim') | set updatetime=250 | endif

" ----------------------------------------------------------------------------
" 2.1 Display
" ----------------------------------------------------------------------------

set title                              " wintitle = filename - vim

set novisualbell                       " no flashes
set noerrorbells                       " no beeps

set numberwidth=5                      " context around current cursor position
set number relativenumber
set scrolloff=8
set sidescrolloff=16

set textwidth=78                      " after column 80, &tw+3
set colorcolumn=+3
set colorcolumn+=120
set cursorline

set synmaxcol=512                     " don't syntax highlight long lines

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

if exists('+signcolumn') | set signcolumn=yes | endif

" ------------------------------------
" Tab line
" ------------------------------------

set showtabline=0                     " start OFF, toggle =2 to show tabline

" ------------------------------------
" Status line
" ------------------------------------

set laststatus=2                      " always show all statuslines

" ------------------------------------
" Command line
" ------------------------------------

" This is slow on some terminals and often gets hidden by msgs so leave it off
set noshowcmd

set noshowmode                        " don't show -- INSERT -- in cmdline

" ----------------------------------------------------------------------------
" Input
" ----------------------------------------------------------------------------

" Enable mouse
set mouse=a

" Typing key combos
set notimeout
set ttimeout

" ----------------------------------------------------------------------------
" Wild and file globbing stuff in command mode
" ----------------------------------------------------------------------------

set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest,full        " Complete files using a menu AND list
let &wildignorecase = v:version >= 704

" wildignore prevents things from showing up in cmd completion
" It's for things you'd NEVER open in Vim, like caches and binary files
" @see https://github.com/tpope/vim-fugitive/issues/121#issuecomment-38720847
" @see https://github.com/kien/ctrlp.vim/issues/63
" @see https://github.com/tpope/vim-vinegar/issues/61#issuecomment-167432416
" @see http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html#comment-1396330403
"
" So don't do this! There are cases where you'd edit them or their contents
"set wildignore+=.git
"set wildignore+=.hg,.svn
"set wildignore+=tags
"set wildignore+=*.manifest

" Binary
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.jar,*.pyc,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" Cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*.gem
set wildignore+=.sass-cache
set wildignore+=npm-debug.log
" Compiled
set wildignore+=*.marko.js
set wildignore+=*.min.*,*-min.*
" Temp/System
set wildignore+=*.*~,*~
set wildignore+=*.swp,.lock,.DS_Store,._*,tags.lock

" ----------------------------------------------------------------------------
" File saving
" ----------------------------------------------------------------------------

" reload files if they were edited elsewhere?
"set autoread
set autowrite     " Automatically :write before running commands

set fileformats=unix,mac,dos
" Not modifiable if no window (e.g. resourcing vimrc)
if !&modifiable | set fileformat=unix | endif

" ----------------------------------------------------------------------------
" Writing swaps
" ----------------------------------------------------------------------------

set noswapfile
set nobackup
set nowritebackup

" ============================================================================
" Plugins: autoinstall vim-plug, define plugins, install plugins if needed
" ============================================================================

let g:nan#vim_dir = fnamemodify(resolve(expand('$MYVIMRC')), ':p:h')
let g:nan#plug_dir = '/vendor/'
let g:nan#plug_absdir = g:nan#vim_dir . g:nan#plug_dir

if executable('git')
  let s:has_plug = !empty(glob(expand(g:nan#vim_dir . '/autoload/plug.vim')))
  if !s:has_plug && executable('curl')
    call nanplug#install#Install()
    let s:has_plug = 1
  endif

  if s:has_plug
    command! PI PlugInstall
    command! PU PlugUpgrade | PlugUpdate
    let g:plug_window = 'tabnew'
    call plug#begin(g:nan#plug_absdir)
    if empty($VIMNOPLUGS) | call nanplug#plugins#LoadAll() | endif
    call plug#end()
  endif
endif

" ----------------------------------------------------------------------------
" Input auto-formatting (global defaults)
" Probably need to update these in after/ftplugin too since ftplugins will
" probably update it.
" ----------------------------------------------------------------------------

set formatoptions=
set formatoptions+=c                  " Auto-wrap comments using textwidth
" set formatoptions+=r                  " Continue comments by default
set formatoptions-=o                  " do not continue comment using o or O
set formatoptions+=q                  " continue comments with gq
set formatoptions-=a                  " auto-gq on type in comments?
set formatoptions+=n                  " Recognize numbered lists
set formatoptions+=2                  " Use indent from 2nd line of a paragraph
set formatoptions-=l                  " break lines that are already long?
set formatoptions+=1                  " Break before 1-letter words
" Vim 7.4 only: no // comment when joining commented lines
if v:version >= 704 | set formatoptions+=j | endif

set nrformats-=octal                  " never use octal when <C-x> or <C-a>

" Does this invalidate what's above?
filetype plugin indent on

" ----------------------------------------------------------------------------
" Whitespace
" ----------------------------------------------------------------------------

set nowrap
set nojoinspaces                      " J command doesn't add extra space

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" ----------------------------------------------------------------------------
" Indenting - overridden by indent plugins
" ----------------------------------------------------------------------------

set autoindent                        " indent when creating newline

" For autoindent, use same spaces/tabs mix as previous line, even if
" tabs/spaces are mixed. Helps for docblock, where the block comments have a
" space after the indent to align asterisks
"
" The test case what happens when using o/O and >> and << on these:
"
"     /**
"      *
"
" Refer also to formatoptions+=o (copy comment indent to newline)
set nocopyindent

" Try not to change the indent structure on "<<" and ">>" commands. I.e. keep
" block comments aligned with space if there is a space there.
set nopreserveindent

" Smart detect when in braces and parens. Has annoying side effect that it
" won't indent lines beginning with '#'. Relying on syntax indentexpr instead.
" 'smartindent' in general is a piece of garbage, never turn it on.
set nosmartindent

" Global setting. I don't edit C-style code all the time so don't default to
" C-style indenting.
set nocindent

" ----------------------------------------------------------------------------
" Tabbing - overridden by editorconfig, after/ftplugin
" ----------------------------------------------------------------------------

" use multiple of shiftwidth when shifting indent levels.
" this is OFF so block comments don't get fudged when using ">>" and "<<"
set noshiftround

" When on, a <Tab> in front of a line inserts blanks according to
" 'shiftwidth'. 'tabstop' or 'softtabstop' is used in other places.
set smarttab

set backspace=indent,eol,start        " bs anything

" ----------------------------------------------------------------------------
" Match and search
" ----------------------------------------------------------------------------

set matchtime=1                       " tenths of a sec
set showmatch                         " briefly jump to matching paren?
set hlsearch
set incsearch
set wrapscan                          " Searches wrap around end of the file.
set ignorecase
" Follow smartcase and ignorecase when doing tag search
if exists('+tagcase') && has('patch-7.4.2230') | set tagcase=followscs | endif
set smartcase

" ----------------------------------------
" Filetype: python
" ----------------------------------------

" $VIMRUNTIME/syntax/python.vim
let g:python_highlight_all = 1

" ----------------------------------------
" Filetype: sh
" ----------------------------------------

" $VIMRUNTIME/syntax/sh.vim - always assume bash
let g:is_bash = 1

" ----------------------------------------
" Filetype: vim
" ----------------------------------------

" $VIMRUNTIME/syntax/vim.vim
" disable mzscheme, tcl highlighting
let g:vimsyn_embed = 'lpPr'

" ============================================================================
" Autocommands
" ============================================================================

augroup nanfile
  autocmd BufReadPre *
        \ if getfsize(expand("%")) > 10000000 | syntax off | endif
  autocmd BufReadPre *.min.* syntax off
augroup END

" augroup nanlines
"   autocmd!
"   autocmd VimEnter * nested call nanline#Init()
" augroup END

augroup nanwindow
  autocmd!
  autocmd VimResized * wincmd =
augroup END

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " ALE linting events
  if g:has_async
    set updatetime=1000
    let g:ale_lint_on_text_changed = 0
    autocmd CursorHold * call ale#Lint()
    autocmd CursorHoldI * call ale#Lint()
    autocmd InsertEnter * call ale#Lint()
    autocmd InsertLeave * call ale#Lint()
  else
    echoerr "These dotfiles require Neovim or Vim 8."
  endif
augroup END

" Leaving this here until I decide on a saner/safer way to do this
let g:rooter_change_directory_for_non_project_files = 'current'

" ============================================================================
" Themes
" ============================================================================

colorscheme two-firewatch
set background=dark

" ============================================================================
" Temporary
" ============================================================================

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

set ruler         " show the cursor position all the time

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

set hidden
